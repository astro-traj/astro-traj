#!/software/anaconda2/bin/python

# ---- Import standard modules to the python path.
import os
import pdb
import argparse

import numpy as np

import astropy.units as units
import astropy.constants as constants

import pandas as pd

import h5py

from scipy.integrate import ode
from scipy.stats import maxwell
from scipy.stats import rv_continuous
from scipy.integrate import quad

from matplotlib import use
use('agg')
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

from progenitor import __version__
from progenitor.system import System
from progenitor import constr_dict
from progenitor.sample import Sample
from progenitor.galaxy import Hernquist_NFW


def parse_commandline():
    """Parse the arguments given on the command-line.
    """
    parser = argparse.ArgumentParser(description="""
    Main function. Samples parameters, implements kicks, and sees whether the systems is a 'successful' merger
    by merging at the proper projected distance.

    Writes to csv file in following format:
    [M2, Mns, Mhe, Apre, Apost, epre, epost, R, galcosth, galphi, Vkick, Tmerge, Rmerge, Rmerge_proj, Vfinal, flag]

    Flag description:
    0: Binary doesn't merge at the proper projected distance
    1: Binary mergers at the correct projected distance
    2: Binary's inspiral time is greater than 10 Gyr, does not evolve
    3: Binary is disrupted by SN kick
    4: Energy conservation requirement not met!!!
    """)

    # default information
    parser.add_argument('-V', '--version', action='version', version=__version__)
    parser.add_argument('-T', '--trials', type=int, default=1, help="Specify the number of trials. Default=1")
    parser.add_argument('-F', '--outfile', type=str, default='output', help="Name of the output file. Default=output")
    parser.add_argument('-SF', '--sys-flag', type=str, default=None, help="Specify a flag for testing aspects of the orbital evolution. Current options: 'circ_test' for setting the kick velocity to 0 and checking that the galactic orbits are circular; 'vkick_test' for setting the galactic orbital velocity to 0 and seeing the affect of just the SN kick. Default=None")
    parser.add_argument('-ST', '--save-trajectories', action="store_true", help="Use this flag to save the trajcetories of successful binaries for plotting and animation purposes. Default is None")

    # data information
    parser.add_argument('-o', '--offset', type=float, default=None, help="Offset from center of galaxy of event. In kpc, unless telescope is specified, then in arcseconds. Default=None")
    parser.add_argument('-oe', '--offset-uncer', type=float, default=None, help="Standard uncertainty on the offset measurement. In kpc, unless telescope is specified, then in arcseconds. Default=None")
    parser.add_argument('-r', '--effective-radius', type=float, default=None, help="Effective radius (kpc). Default=None")
    parser.add_argument('-m', '--stellar-mass', type=float, default=None, help="Stellar Mass (log Msun). Default=None")
    parser.add_argument('-z', '--redshift', type=float, default=None, help="Redshift. Default=None")
    parser.add_argument('-d', '--distance', type=float, default=None, help="Distance to the galaxy (Mpc). Default=None")
    parser.add_argument('-g', '--galaxy', type=str, default=None, help="Name of galaxy that is pulled from the dictionaries in constr_dict.py. Default=None")
    parser.add_argument('-t', '--telescope', type=str, default=None, help="Name of telescope in dictionaries in constr_dict.py from which offset and offset uncertainty are calculated. Default=None")
    parser.add_argument('-s', '--samples', help="Path to posterior samples. Default=None")
    parser.add_argument('--grb', help="Name of GRB in sGRBs.txt to perform analysis on. Default=None")

    # sampling information
    parser.add_argument('--Apre_samp', type=str, default='uniform', help="Specify sampling procedure for initial semi-major axis. Default=uniform")
    parser.add_argument('--Mhe_samp', type=str, default='uniform', help="Specify sampling procedure for helium star mass. Default=uniform")
    parser.add_argument('--Vkick_samp', type=str, default='maxwellian', help="Specify sampling procedure for kick velocity. Default=maxwellian")
    parser.add_argument('--Mns_samp', type=str, default='gaussian', help="Specify sampling procedure for NS masses, Can use posteriors from GW observations (if you provide valid) samples argumentor or draw from a distribtuion tuned to the properties tuned to galactic DNS systems. Default=gaussian")
    parser.add_argument('--epre_samp', type=str, default='circularized', help="Specify sampling procedure for initial eccentricity. Default=circularized")
    args = parser.parse_args()

    return args

def main(offset, offset_uncer, r_eff, stellar_mass, redshift):
    """
    Main function. Samples parameters, implements kicks, and sees whether the systems is a 'successful' merger
    by merging at the proper projected distance.

    Writes to csv file in following format:
    [M2, Mns, Mhe, Apre, Apost, epre, epost, R, galcosth, galphi, Vkick, Tmerge, Rmerge, Rmerge_proj, Vfinal, flag]

    Flag descriptions:
    0: Binary doesn't merge at the proper projected distance
    1: Binary mergers at the correct projected distance
    2: Binary's inspiral time is greater than 14 Gyr, does not evolve
    3: Binary is disrupted by SN kick
    4: Energy conservation requirement not met
    """

    print "\nInitializing galaxy and reading inputs..."
    # set cosmology (Riess=0.73, Planck=0.679) [h = H0/(100 km/s/Mpc)]
    h = 0.679

    c = constants.c.value*units.m.to(units.km)   # km/s
    # Info about the neutron stars, either from GW posteriors or inferred from galactic DNSs
    NS = constr_dict.NS_masses(args.samples)

    # Info about the galaxy, either from galaxy dict or user input
    Galaxy = constr_dict.galaxy(r_eff, h, stellar_mass=stellar_mass, redshift=redshift, distance=args.distance, galaxy_name=args.galaxy)

    # Uncertainty in the offset measurement, either measured or derived from angular resolution of telescope
    Offset = constr_dict.offset(offset, args.distance, offset_uncer, args.telescope)

    # Initialize potential with galactic parameters, choose from one of the definied potentials in galaxy class
    gal=Hernquist_NFW(Galaxy['Mspiral'], Galaxy['Mbulge'], Galaxy['Mhalo'], Galaxy['R_eff'], Galaxy['distance'], redshift, h)
    # Initialize sampling function
    samp=Sample(NS, gal)


    # Create empty output file
    output_columns=['Mcomp', 'Mns', 'Mhe', 'Apre', 'Apost', 'epre', 'epost', 'd', 'R', 'R_proj', 'galcosth', 'galphi', 'Vkick', 'phi', 'costh', 'omega', 'vphi', 'vcosth', 'Vsys', 'Tmerge', 'Rmerge', 'Rmerge_proj', 'Vfinal', 'Vx_final', 'Vy_final', 'Vz_final', 'flag']
    df = pd.DataFrame([], columns=output_columns)
    df.to_csv(args.outfile+'.dat', sep=',', index=False)



    #########################
    ####### MAIN LOOP #######
    #########################
    Nsys=args.trials
    dEfrac = 0.0

    # Initialize random draws for some parameters based on number of trials
    print "\nSampling binary parameters..."
    
    # Sample NS masses (Msun)
    Mcomp_dist, Mns_dist = samp.sample_masses(args.Mns_samp, args.samples, size=Nsys)

    # Sample pre-SN SMA (Rsun)
    Apre_dist = samp.sample_Apre(Amin=0.1, Amax=10.0, method=args.Apre_samp, size=Nsys)

    # Sample pre-SN eccentricity (dimensionless)
    epre_dist = samp.sample_epre(method=args.epre_samp, size=Nsys)

    # Sample galactic radius of SN2 (kpc)
    R_pdf = samp.initialize_R()
    R_dist = samp.sample_R(R_pdf, Nsys)
    
    # Sample He-star mass (Msun)
    dumrand = np.random.uniform(0, 1, size=Nsys)   # needed if we do either of the B&P prescriptions
    PDFMhe, ECSN_PDFMhe, CCSN_PDFMhe = None, None, None
    if args.Mhe_samp == 'beniamini_1pop':
        PDFMhe = samp.initialize_Mhe(0.6)
    elif args.Mhe_samp == 'beniamini_2pop':
        ECSN_PDFMhe = samp.initialize_Mhe(0.1)
        CCSN_PDFMhe = samp.initialize_Mhe(1.0)
    Mhe_dist = samp.sample_Mhe(Mmin=Mns_dist.min(), method=args.Mhe_samp, size=Nsys, PDF=PDFMhe, ECSN_PDF=ECSN_PDFMhe, CCSN_PDF=CCSN_PDFMhe, irand=dumrand)

    # Sample SN kick velocity
    ECSN, CCSN = samp.initialize_Vkick()
    Vkick_dist = samp.sample_Vkick(method=args.Vkick_samp, size=Nsys, ECSN_PDF=ECSN, CCSN_PDF=CCSN, Mhe=Mhe_dist, irand=dumrand)


    # If we are doing radial or tangential tests to get min velocity, we sample R and Vkick on a grid
    if args.sys_flag in ['radial', 'tangential']:
        R_dist = np.linspace(0.001,Galaxy['offset'],10)
        Vkick_dist=np.linspace(0,1000,100)
        R_dist, Vkick_dist = np.meshgrid(R_dist, Vkick_dist)
        R_dist, Vkick_dist = R_dist.ravel(), Vkick_dist.ravel()

        Mns, Mcomp = 1.097*np.ones(R_dist.size), 1.713*np.ones(R_dist.size)
        Mhe, Apre = 1.5*np.ones(R_dist.size), 2.0*np.ones(R_dist.size)
    
    

    # Do the evolution! 
    print "\nStarting the evolution of sampled binaries!"
    for R, Mcomp, Mns, Apre, epre, Mhe, Vkick in zip(R_dist, Mcomp_dist, Mns_dist, Apre_dist, epre_dist, Mhe_dist, Vkick_dist):
        
        # initialize System class with pertinent parameters
        T=System(gal, R, Mns, Mcomp, Mhe, Apre, epre, Vkick, sys_flag=args.sys_flag)
        '''
        If we want to hand-set the parameters that go into System, do it here:
        T = System(gal, R=0.935422, \
                        Mns=1.329030, \
                        M2=1.433028, \
                        Mhe=6.465068, \
                        Apre=5.104368, \
                        epre=epre, \
                        Vkick=737.757136, \
                        galphi=3.274058, \
                        galcosth=0.941617, \
                        omega=3.037751, \
                        phi=3.431043, \
                        costh=-0.922121)
        '''

        # if the radial or tangential flag is thrown, perform modified evolution
        if T.sys_flag in ['radial', 'tangential']:
            if R>Galaxy['offset']:continue
            T.SN()
            T.flag=9 
            if T.sys_flag == 'radial':
                T.X0,T.Y0,T.Z0=T.R,0.,0.
                T.Vx0,T.Vy0,T.Vz0 = T.V_sys,0.,0.
            elif T.sys_flag == 'tangential':
                T.setXYZ_0()
                T.setVxyz_0()
            T.Tmerge = 0.1*u.Gyr.to(u.s)
            T.doMotion()

            for i in range(len(T.X)):
                if T.sys_flag == 'radial':
                    TrueOffset = T.X[i]
                elif T.sys_flag == 'tangential':
                    TrueOffset = np.sqrt((T.X[i]**2)+(T.Y[i]**2)+(T.Z[i]**2))
                if TrueOffset > Galaxy['offset']*u.kpc.to(u.m):
                    T.Tmerge = T.t[i]
                    T.Rmerge = T.X[i]
                    outdata = T.write_data()
                    f = open(args.outfile+'.dat', 'a')
                    f.write(str(outdata)[1:-1]+'\n')
                    f.close()
                    break
            continue
                
            

        # implement a SN kick to the system, and check to see if binary is disrupted
        T.SN()
        # if binary is disrupted, move on to next system
        if T.flag == 3:
            outdata = T.write_data()
            f = open(args.outfile+'.dat', 'a')
            f.write(str(outdata)[1:-1]+'\n')
            f.close()
            continue

        # set merger time for trajectory integration, specify Tmin and Tmax in Gyr
        T.setTmerge(Tmin=0.0, Tmax=14.0)
        # if binary does not meet inspiral time requirements, move on to next system
        if T.flag == 2:
            outdata = T.write_data()
            f = open(args.outfile+'.dat', 'a')
            f.write(str(outdata)[1:-1]+'\n')
            f.close()
            continue

        # choose random location on sphere of radius R
        T.setXYZ_0()
        # choose random direction for circular velocity, and add SN-imparted velocity to get V0
        T.setVxyz_0()

        # integrate trajectory until Tmerge
        T.doMotion()

        # now, see if a successful binary for replicating GW has been created!
        T.check_success(Offset['offset'], uncer=Offset['offset_uncer'])

        # check for energy conservation, and hold onto highest offset
        T.energy_check()
        if T.dEfrac > dEfrac:
            dEfrac = T.dEfrac


        # hold onto output data if successful binary is produced
        outdata = T.write_data()
        f = open(args.outfile+'.dat', 'a')
        f.write(str(outdata)[1:-1]+'\n')
        f.close()

        if (T.flag==1 and args.save_trajectories==True):
            T.save_evolution(str(T.Vkick)[:3])



    ########################
    ####### END LOOP #######
    ########################


    # print maximum energy difference to check for conservation of energy
    print '\nFinished! Maximum energy difference between initial post-SN energy and final energy: %.20f' % dEfrac


# MAIN FUNCTINON
if __name__ == '__main__':
    args = parse_commandline()

    # save a few of the command-line variables
    offset = args.offset
    offset_uncer = args.offset_uncer
    effective_radius = args.effective_radius
    stellar_mass = args.stellar_mass
    redshift = args.redshift

    # if we read the GRB file
    if args.grb:
        print '\nUsing information from GRB%s' % (str(args.grb))
        GRB_data = pd.read_csv('sGRBs.txt')
        GRB_data = GRB_data.dropna(subset=['log(M*)','r_e','z'])
        GRB_data.set_index(['GRB'], inplace=True)
        
        offset = GRB_data.loc[args.grb, 'deltaR']
        offset_uncer = GRB_data.loc[args.grb, 'deltaR_err']
        effective_radius = GRB_data.loc[args.grb, 'r_e']
        stellar_mass = GRB_data.loc[args.grb, 'log(M*)']
        redshift = GRB_data.loc[args.grb, 'z']

    main(offset, offset_uncer, effective_radius, stellar_mass, redshift)

